syntax="proto3";

package raft_pb;

// RequestVoreRequest are initiated by node in Candidate state, on election.
message RequestVoteRequest {
    int64 term = 1;
    int64 committed_sequence = 2;
}

message RequestVoteReply {
    bool Ack = 1;
    // This reply is in response to this request.
    AppendEntryRequest request = 2;
}

// AppendEntryRequest are initiated by Leader nodes to request replication of log.
// AppendEntryRequest with no log entries are sent by Leader as keepalives,
// to stave off elections, and to convey highest committed sequence.
message AppendEntryRequest {
    // Term of leadership.
    int64 term = 1;
    // Largest sequence committed.
    int64 committed_sequence = 2;
    // Sequence for this log entry.
    int64 sequence = 3;
    // Log entry for this sequence.
    bytes log_entry = 4;
}

message AppendEntryReply {
    // This reply is in response to this request.
    AppendEntryRequest request = 1;
}

// TimeoutNowRequest
message TimeoutNowRequest {
}

message TimeoutNowReply {
}

// Error handling as recommended here:
// https://cloud.google.com/apis/design/errors#error_model

service RaftService {
    rpc AppendEntry(AppendEntryRequest) returns (AppendEntryReply);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteReply);
    rpc TimeoutRequest(TimeoutNowRequest) returns (TimeoutNowReply);
}